services:
# 1. Initialise DB with Random Pass

  mariadb-configurator:
    image: 767398110122.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/mariadb-configurator:1.0
    restart: on-failure
    volumes:
      - mariadb_pass_vol:/shared

# 2. Actual MariaDB 

  hpmariadb:
    image: 767398110122.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/mariadb:10.4
    restart: on-failure
    depends_on:
      mariadb-configurator:
        condition: service_completed_successfully
        restart: true  
    environment:
      APP_VERSION: "5.2.0"
      # MARIADB_ROOT_PASSWORD_FILE: "" ### NOT REQUIRED UNLESS SUPPLYING PASSWORD EXTERNALLY VIA MOUNTED VOLUMES
    volumes:
      - mariadb_data_vol:/var/lib/mysql:Z
      - mariadb_pass_vol:/shared
    # ports:
    #   - 3306:3306
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3


# 3. Once DB is Up Check for Configs to SetUp other Tools   

  dbconnector:
    image: 767398110122.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/dbconnector:1.0
    restart: no
    environment:
      DBHOST: "hpmariadb"
    depends_on:
      hpmariadb:
        condition: service_healthy
        restart: true
    volumes:
      - mariadb_pass_vol:/shared
      - mobsf_config_vol:/mobsf
      - zap_config_vol:/zap

# 4. Once DBConnector Creates Necessary Startup Files Start Mobsf
  
  mobsf:
    image: 767398110122.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/mobsf:v3.9.7
    restart: on-failure
    depends_on:
      dbconnector:
        condition: service_completed_successfully 
        restart: true
    volumes:
      - mobsf_config_vol:/run/secrets
    # ports:
    #   - 8000:8000
    healthcheck:
      test: curl -f http://localhost:8000/login/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 5      


# 5. Once DBConnector Creates Necessary Startup Files Start ZAP

  zap:
    image: 767398110122.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/zap:2.14.0
    restart: on-failure
    depends_on:
      dbconnector:
        condition: service_completed_successfully
        restart: true
    environment:
      ZAP_PORT: 8812
      JMEM: "-XX:MaxRAMPercentage=50.0 -XshowSettings:vm"
    volumes:
      - zap_config_vol:/shared
    # ports:
    #   - 8812:8812

# 6 SONARQUBE 
  sonarqube:
    image: 767398110122.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/sonarqube:9.9.3-community
    restart: on-failure
    depends_on:
      sonardb:
        condition: service_healthy
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonardb:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar    
    # ports:
    #   - 9000:9000
    volumes:
      - sonarqube_data_vol:/opt/sonarqube/data
      - sonarqube_extensions_vol:/opt/sonarqube/extensions
      - sonarqube_logs_vol:/opt/sonarqube/logs
      - sonarqube_temp_vol:/opt/sonarqube/temp
  sonardb:
    image: 767398110122.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/postgres:15
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    hostname: postgresql
    container_name: postgresql
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - postgresql_vol:/var/lib/postgresql
      - postgresql_data_vol:/var/lib/postgresql/data    
  burp:
    image: 767398110122.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/burp-suite-pro-activated:1.0.1
    # ports: 
    #  - 9991:9991 # Burp API
    #  - 5900:5900 #VNC Client
    #  - 6080:6080 #Web VNC Client
    #  - 1337:1337 
    #  - 8080:8080 #Burp Default Port

  genericagent:
    image: 767398110122.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/genericagent:6.1.1
    restart: on-failure
    # user: root
    depends_on:
      zap:
        condition: service_started
        restart: true
      mobsf:
        condition: service_started
        restart: true
      sonarqube:
        condition: service_started
        restart: true
    cap_add:
      - NET_ADMIN # for capturing packages in promiscuous mode
      - NET_RAW # for raw sockets e.g. used for the boreas alive detection
    environment:
      CLIENTID: "${CLIENTID}"
      CLIENTSECRET: "${CLIENTSECRET}"
      UNI5XPOSUREHOST: "${UNI5XPOSUREHOST}"
      DBHOST: "hpmariadb"
    security_opt:
      - seccomp=unconfined
      - apparmor=unconfined      
    volumes:
      - gvmd_socket_vol:/run/gvmd
      - mariadb_pass_vol:/shared
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9096:9096

volumes:
  gvmd_socket_vol:
  mariadb_data_vol:
  mariadb_pass_vol:
  mobsf_config_vol:
  postgresql_vol:
  postgresql_data_vol:
  sonarqube_data_vol:
  sonarqube_extensions_vol:
  sonarqube_logs_vol: 
  sonarqube_temp_vol:
  zap_config_vol:
