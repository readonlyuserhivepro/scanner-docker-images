services:
  redis-server:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/redis-server
    restart: on-failure
    volumes:
      - redis_socket_vol:/run/redis/

  pg-gvm:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/pg-gvm:22.6.5
    restart: on-failure
    volumes:
      - psql_data_vol:/var/lib/postgresql
      - psql_socket_vol:/var/run/postgresql

  gvmd:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/gvmd:23.8.1
    restart: on-failure
    volumes:
      - gvmd_data_vol:/var/lib/gvm
      - scap_data_vol:/var/lib/gvm/scap-data/
      - cert_data_vol:/var/lib/gvm/cert-data
      - data_objects_vol:/var/lib/gvm/data-objects/gvmd
      - vt_data_vol:/var/lib/openvas/plugins
      - psql_data_vol:/var/lib/postgresql
      - gvmd_socket_vol:/run/gvmd
      - ospd_openvas_socket_vol:/run/ospd
      - psql_socket_vol:/var/run/postgresql
      - shared-data:/shared
    depends_on:
      pg-gvm:
        condition: service_started

  gsa:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/gsa:23.2.1
    restart: on-failure
    # ports:
    #   - 9392:80
    volumes:
      - gvmd_socket_vol:/run/gvmd
    depends_on:
      - gvmd
  # Sets log level of openvas to the set LOG_LEVEL within the env
  # and changes log output to /var/log/openvas instead /var/log/gvm
  # to reduce likelyhood of unwanted log interferences
  configure-openvas:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/openvas-scanner:23.8.2
    volumes:
      - openvas_data_vol:/mnt
      - openvas_log_data_vol:/var/log/openvas
    command:
      - /bin/sh
      - -c
      - |
        printf "table_driven_lsc = yes\nopenvasd_server = http://openvasd:80\ntest_alive_hosts_only = yes\nmax_vts_timeouts = 5" > /mnt/openvas.conf
        sed "s/127/128/" /etc/openvas/openvas_log.conf | sed 's/gvm/openvas/' > /mnt/openvas_log.conf
        chmod 644 /mnt/openvas.conf
        chmod 644 /mnt/openvas_log.conf
        touch /var/log/openvas/openvas.log
        chmod 666 /var/log/openvas/openvas.log

  # shows logs of openvas
  openvas:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/openvas-scanner:23.8.2
    restart: on-failure
    volumes:
      - openvas_data_vol:/etc/openvas
      - openvas_log_data_vol:/var/log/openvas
    command:
      - /bin/sh
      - -c
      - |
        cat /etc/openvas/openvas.conf
        tail -f /var/log/openvas/openvas.log
    depends_on:
      configure-openvas:
        condition: service_completed_successfully

  openvasd:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/openvas-scanner:23.8.2
    restart: on-failure
    environment:
      # `service_notus` is set to disable everything but notus,
      # if you want to utilize openvasd directly removed `OPENVASD_MODE`
      OPENVASD_MODE: service_notus
      GNUPGHOME: /etc/openvas/gnupg
      LISTENING: 0.0.0.0:80
    command:
      - /bin/sh
      - -c
      - |
        /usr/local/bin/openvasd  --ospd-socket /run/ospd/ospd-openvas.sock
    volumes:
      - openvas_data_vol:/etc/openvas
      - openvas_log_data_vol:/var/log/openvas
      - notus_data_vol:/var/lib/notus
      - ospd_openvas_socket_vol:/run/ospd
    # enable port forwarding when you want to use the http api from your host machine
    # ports:
    #   - 127.0.0.1:3000:80
    depends_on:
      # vulnerability-tests:
      #   condition: service_completed_successfully
      configure-openvas:
        condition: service_completed_successfully
    networks:
      default:
        aliases:
          - openvasd

  ospd-openvas:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/ospd-openvas:22.7.1
    restart: on-failure
    hostname: ospd-openvas.local
    cap_add:
      - NET_ADMIN # for capturing packages in promiscuous mode
      - NET_RAW # for raw sockets e.g. used for the boreas alive detection
    security_opt:
      - seccomp=unconfined
      - apparmor=unconfined
    command:
      [
        "ospd-openvas",
        "-f",
        "--config",
        "/etc/gvm/ospd-openvas.conf",
        "--notus-feed-dir",
        "/var/lib/notus/advisories",
        "-m",
        "666"
      ]
    volumes:
      - vt_data_vol:/var/lib/openvas/plugins
      - notus_data_vol:/var/lib/notus
      - ospd_openvas_socket_vol:/run/ospd
      - redis_socket_vol:/run/redis/
      - openvas_data_vol:/etc/openvas/
      - openvas_log_data_vol:/var/log/openvas
    depends_on:
      redis-server:
        condition: service_started
      configure-openvas:
        condition: service_completed_successfully

  gvm-tools:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/gvm-tools
    volumes:
      - gvmd_socket_vol:/run/gvmd
      - ospd_openvas_socket_vol:/run/ospd
    depends_on:
      - gvmd
      - ospd-openvas

  index-fix:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/index-fix:1.0
    restart: no
    volumes:
      - psql_socket_vol:/var/run/postgresql
      - psql_data_vol:/var/lib/postgresql
    depends_on:
      - pg-gvm
  ovasagent:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/ovasagent:2.1.2
    ports:
      - 9081:9081
    environment:
      GVM_CLI_USERNAME: admin
      UNI5_API_URL: "${UNI5_API_URL}"
      UNI5_API_KEY: "${UNI5_API_KEY}"
      API_KEY: "${API_KEY}"     
      PROFILE: "production"
      # SPRING_PROFILES_ACTIVE:"production" // For Setting the ACTIVE PROFILE 
    volumes:
      - vt_data_vol:/var/lib/openvas/plugins
      - notus_data_vol:/var/lib/notus
      - gvmd_data_vol:/var/lib/gvm
      - scap_data_vol:/var/lib/gvm/scap-data
      - cert_data_vol:/var/lib/gvm/cert-data
      - data_objects_vol:/var/lib/gvm/data-objects/gvmd
      - gvmd_socket_vol:/run/gvmd
      - ospd_openvas_socket_vol:/run/ospd
      - shared-data:/shared
    depends_on:
      - gvmd

  outboundagent:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/outboundagent:2.1.0
    environment:
      KRONOS_API_URL: "${KRONOS_API_URL}"
      KRONOS_API_KEY: "${KRONOS_API_KEY}"
      # SPRING_PROFILES_ACTIVE: ""
    ports:
      - 8081:8081
      - 8083:8083






######################## ASPM #####################################

# 1. Initialise DB with Random Pass

  mariadb-configurator:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/mariadb-configurator:1.0
    restart: on-failure
    volumes:
      - mariadb_pass_vol:/shared

# 2. Actual MariaDB 

  hpmariadb:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/mariadb:10.4
    restart: on-failure
    depends_on:
      mariadb-configurator:
        condition: service_completed_successfully
        restart: true  
    environment:
      APP_VERSION: "5.2.0"
      # MARIADB_ROOT_PASSWORD_FILE: "" ### NOT REQUIRED UNLESS SUPPLYING PASSWORD EXTERNALLY VIA MOUNTED VOLUMES
    volumes:
      - mariadb_data_vol:/var/lib/mysql:Z
      - mariadb_pass_vol:/shared
    # ports:
    #   - 3306:3306
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3


# 3. Once DB is Up Check for Configs to SetUp other Tools   

  dbconnector:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/dbconnector:1.0
    restart: no
    environment:
      DBHOST: "hpmariadb"
    depends_on:
      hpmariadb:
        condition: service_healthy
        restart: true
      gvmd:
        condition: service_started
        restart: true
    volumes:
      - mariadb_pass_vol:/shared
      - mobsf_config_vol:/mobsf
      - zap_config_vol:/zap
      - shared-data:/gvmd


# 4. Once DBConnector Creates Necessary Startup Files Start Mobsf
  
  mobsf:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/mobsf:v3.9.7
    restart: on-failure
    depends_on:
      dbconnector:
        condition: service_completed_successfully 
        restart: true
    volumes:
      - mobsf_config_vol:/run/secrets
    healthcheck:
      test: curl -f http://localhost:8000/login/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 5    
    # ports:
    #   - 8000:8000



# 5. Once DBConnector Creates Necessary Startup Files Start ZAP

  zap:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/zap:2.14.0
    restart: on-failure
    depends_on:
      dbconnector:
        condition: service_completed_successfully
        restart: true
    environment:
      ZAP_PORT: 8812
      JMEM: "-XX:MaxRAMPercentage=50.0 -XshowSettings:vm"
    volumes:
      - zap_config_vol:/shared
    # ports:
    #   - 8812:8812

# 6 SONARQUBE 
  sonarqube:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/sonarqube:9.9.3-community
    restart: on-failure
    depends_on:
      sonardb:
        condition: service_healthy
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonardb:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar    
    # ports:
    #   - 9000:9000
    volumes:
      - sonarqube_data_vol:/opt/sonarqube/data
      - sonarqube_extensions_vol:/opt/sonarqube/extensions
      - sonarqube_logs_vol:/opt/sonarqube/logs
      - sonarqube_temp_vol:/opt/sonarqube/temp
  sonardb:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/postgres:15
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    hostname: postgresql
    container_name: postgresql
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - postgresql_vol:/var/lib/postgresql
      - postgresql_data_vol:/var/lib/postgresql/data    
  burp:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/burp-suite-pro-activated:1.0.1
    # ports: 
    #  - 9991:9991 # Burp API
    #  - 5900:5900 #VNC Client
    #  - 6080:6080 #Web VNC Client
    #  - 1337:1337 
    #  - 8080:8080 #Burp Default Port

  genericagent:
    image: 098915869641.dkr.ecr.us-east-1.amazonaws.com/containerized-scanner-bundles/genericagent:6.1.1
    restart: on-failure
    # user: root
    depends_on:
      zap:
        condition: service_started
        restart: true
      mobsf:
        condition: service_started
        restart: true
      sonarqube:
        condition: service_started
        restart: true
    cap_add:
      - NET_ADMIN # for capturing packages in promiscuous mode
      - NET_RAW # for raw sockets e.g. used for the boreas alive detection
    environment:
      CLIENTID: "${CLIENTID}"
      CLIENTSECRET: "${CLIENTSECRET}"
      UNI5XPOSUREHOST: "${UNI5XPOSUREHOST}"
      DBHOST: "hpmariadb"
    security_opt:
      - seccomp=unconfined
      - apparmor=unconfined      
    volumes:
      - gvmd_socket_vol:/run/gvmd
      - mariadb_pass_vol:/shared
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9096:9096

volumes:
  cert_data_vol:
  data_objects_vol:
  gvmd_data_vol:
  gvmd_socket_vol:
  mariadb_data_vol:
  mariadb_pass_vol:
  mobsf_config_vol:
  notus_data_vol:  
  openvas_data_vol:
  openvas_log_data_vol:  
  ospd_openvas_socket_vol:  
  postgresql_vol:
  postgresql_data_vol:
  psql_data_vol:
  psql_socket_vol:
  redis_socket_vol:  
  scap_data_vol:  
  shared-data:
  sonarqube_data_vol:
  sonarqube_extensions_vol:
  sonarqube_logs_vol: 
  sonarqube_temp_vol:
  vt_data_vol:  
  zap_config_vol:






  
  









